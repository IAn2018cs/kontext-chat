const starterImages = [
  {
    imageUrl: 'https://replicate.delivery/pbxt/N55l5TWGh8mSlNzW8usReoaNhGbFwvLeZR3TX1NL4pd2Wtfv/replicate-prediction-f2d25rg6gnrma0cq257vdw2n4c.png',
    suggestedPrompt: 'make it into a 90s cartoon',
  },
  {
    imageUrl: 'https://replicate.delivery/pbxt/N5cepICxyaagdvULl0phi7ImdxuFz05TR2l623zqxhNR9q5Y/van-gogh.jpeg',
    suggestedPrompt: 'Using this style, a panda astronaut riding a unicorn',
  },
  {
    imageUrl: 'https://replicate.delivery/xezq/OKWfR6jlQwzekkSsfQOppX55O3vaNv6xZ4qY6RfHjwQHOwDTB/tmp9p3v3brc.png',
    suggestedPrompt: 'remove the text from the sweatshirt',
  },
  {
    imageUrl: 'https://replicate.delivery/pbxt/N5trWTJCJQbJVWz5nhLEscS1w16r1hGl5zuWceJhVSnWZfGu/mona-lisa-1024.jpg',
    suggestedPrompt: 'close her eyes',
  }
]

function App() {
  // Use a random starter image for the initial message
  const randomIndex = Math.floor(Math.random() * starterImages.length);
  const [messages, setMessages] = React.useState([
    {
      type: 'image',
      image: starterImages[randomIndex].imageUrl,
      prompt: starterImages[randomIndex].suggestedPrompt,
      from: 'bot',
    },
    {
      type: 'text',
      text: 'what should we change about this image?',
      from: 'bot',
    },
  ]);
  const [input, setInput] = React.useState(starterImages[randomIndex].suggestedPrompt);
  const [loading, setLoading] = React.useState(false);

  // Ref for chat container
  const chatContainerRef = React.useRef(null);

  // Scroll to bottom when messages change
  React.useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  // Helper to scroll to bottom (for image onLoad)
  function scrollToBottom() {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }

  const [dragActive, setDragActive] = React.useState(false);
  const [droppedImage, setDroppedImage] = React.useState(null); // data-url

  // Track the most recent user-uploaded image (data-url or null)
  const [userImage, setUserImage] = React.useState(null);

  // Helper to get the last image URL or user-uploaded image
  function getLastImageUrl() {
    if (userImage) return userImage;
    for (let i = messages.length - 1; i >= 0; i--) {
      const msg = messages[i];
      if (msg.type === 'image') {
        return msg.image;
      }
    }
    return starterImages[0].imageUrl;
  }

  // Drag and drop handlers
  function handleDrag(e) {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  }

  function handleDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    const files = e.dataTransfer.files;
    if (files && files[0] && files[0].type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = function (event) {
        const dataUrl = event.target.result;
        setUserImage(dataUrl);
        setDroppedImage(dataUrl);
        setMessages(msgs => [
          ...msgs,
          { type: 'image', image: dataUrl, from: 'user' },
          { type: 'text', text: 'Image uploaded! Now enter a prompt and press Send.', from: 'bot' },
        ]);
      };
      reader.readAsDataURL(files[0]);
    }
  }

  // Attach drag events to the whole window
  React.useEffect(() => {
    window.addEventListener('dragenter', handleDrag);
    window.addEventListener('dragover', handleDrag);
    window.addEventListener('dragleave', handleDrag);
    window.addEventListener('drop', handleDrop);
    return () => {
      window.removeEventListener('dragenter', handleDrag);
      window.removeEventListener('dragover', handleDrag);
      window.removeEventListener('dragleave', handleDrag);
      window.removeEventListener('drop', handleDrop);
    };
  }, []);

  // When a new image is generated by the bot, clear userImage so next prompt uses the new image
  React.useEffect(() => {
    if (messages.length > 0 && messages[messages.length - 1].from === 'bot' && messages[messages.length - 1].type === 'image') {
      setUserImage(null);
    }
  }, [messages]);

  // Handler for sending a message
  const handleSend = async (e) => {
    e.preventDefault();
    if (!input.trim() || loading) return;
    const userMsg = { type: 'text', text: input, from: 'user' };
    setMessages([...messages, userMsg]);
    setInput('');
    setLoading(true);

    // Show loading bubble
    setMessages(msgs => [
      ...msgs,
      { type: 'loading', from: 'bot' },
    ]);

    // Prepare prompt and input_image
    const prompt = input;
    const input_image = getLastImageUrl();

    try {
      // Send POST request with prompt and input_image as JSON
      const res = await fetch('/generate-image', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt, input_image }),
      });
      const imageUrl = await res.text();
      // Remove loading bubble and add image message
      setMessages(msgs => [
        ...msgs.filter(m => m.type !== 'loading'),
        { type: 'image', image: imageUrl, from: 'bot' },
      ]);
    } catch (err) {
      setMessages(msgs => [
        ...msgs.filter(m => m.type !== 'loading'),
        { type: 'text', text: 'Error generating image.', from: 'bot' },
      ]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <main className="w-full max-w-3xl mx-auto p-0 flex flex-col h-[90vh] bg-white rounded-lg shadow-md overflow-hidden mt-12">
        <a href="https://github.com/replicate/kontext-chat-cloudflare"><img src="/kontext-chat-rainbow.png" className="w-1/2 mx-auto" alt="Kontext Chat" /></a>

        
        <div className="flex-1 overflow-y-auto p-6 space-y-4 bg-gray-50" ref={chatContainerRef}>
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={
                msg.from === 'user'
                  ? 'flex justify-end'
                  : 'flex justify-start'
              }
            >
              <div
                className={
                  'rounded-2xl px-4 py-3 ' +
                  (msg.type === 'image'
                    ? 'w-full'
                    : 'max-w-xs') + ' ' +
                  (msg.from === 'user'
                    ? 'bg-stone-900 text-white rounded-br-none'
                    : 'bg-gray-200 text-gray-900 rounded-bl-none')
                }
              >
                {msg.type === 'image' ? (
                  <img
                    src={msg.image}
                    alt="generated"
                    className="w-full h-auto object-cover rounded-xl mb-2"
                    onLoad={scrollToBottom}
                  />
                ) : null}
                {msg.type === 'loading' ? (
                  <div className="flex items-center gap-2"><span className="animate-pulse">‚è≥</span> Generating image...</div>
                ) : null}
                {msg.text}
              </div>
            </div>
          ))}
        </div>
        <form
          onSubmit={handleSend}
          className="p-4 border-t bg-white flex gap-2"
          style={{ boxShadow: '0 -2px 8px rgba(0,0,0,0.03)' }}
        >
          <input
            type="text"
            className="flex-1 border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-stone-400"
            value={input}
            onChange={e => setInput(e.target.value)}
            placeholder="Type your message or drag and drop an image file..."
            disabled={loading}
          />
          <button
            type="submit"
            className="bg-stone-900 text-white px-4 py-2 rounded-lg hover:bg-stone-800 transition"
            disabled={loading}
          >
            Send
          </button>
        </form>
      </main>

      {/* Footer: match chat width, rounded corners, bottom margin */}
      <div className="w-full max-w-3xl mx-auto rounded-b-lg mb-8">
        <footer className="">
          <div className="">
            <p className="text-center py-6 px-8 text-orange-200 text-2xl mt-12 leading-relaxed">
              Kontext Chat is powered by <a href="https://replicate.com/black-forest-labs/flux-kontext-pro" className="underline text-orange-100">Flux Kontext Pro</a>, a new image model from <a href="https://black-forest-labs.com/" className="underline text-orange-100">Black Forest Labs</a>, running on <a href="https://replicate.com/black-forest-labs/flux-kontext-pro" className="underline text-orange-100">Replicate</a>. The app is built with Hono and React, running on <a href="https://workers.dev/" className="underline text-orange-100">Cloudflare Workers</a>. Check out the <a href="https://github.com/replicate/kontext-chat-cloudflare" className="underline text-orange-100">source code</a> on GitHub.
            </p>

            <nav className="text-center mt-16 mb-8">
            <a
                className="inline-block relative w-16 h-16 mx-2 opacity-60 hover:opacity-100 transition-all duration-200"
                href="https://replicate.com/black-forest-labsutm_source=project&utm_campaign=kontext-chat-cloudflare"
              >
                <img
                  src="/logomarks/bfl.svg"
                  alt="Black Forest Labs"
                  data-tooltip-id="black-forest-labs-tooltip"
                  data-tooltip-content="Powered by Black Forest Labs"
                  className="p-3 hover:p-1 transition-all duration-200 hover:saturate-100"
                  style={{width: '100%', height: '100%', position: 'relative'}}
                />
              </a>

              <a
                className="inline-block relative w-16 h-16 mx-2 opacity-60 hover:opacity-100 transition-all duration-200"
                href="https://replicate.com?utm_source=project&utm_campaign=kontext-chat-cloudflare"
              >
                <img
                  src="/logomarks/replicate.svg"
                  alt="Replicate"
                  data-tooltip-id="replicate-tooltip"
                  data-tooltip-content="Built by Replicate"
                  className="p-3 hover:p-1 transition-all duration-200 hover:saturate-100"
                  style={{width: '100%', height: '100%', position: 'relative'}}
                />
              </a>

              <a className="inline-block relative w-20 h-16 mx-2 opacity-60 hover:opacity-100 transition-all duration-200" href="https://cloudflare.com">
                <img
                  src="/logomarks/cloudflare.svg"
                  data-tooltip-id="cloudflare-tooltip"
                  data-tooltip-content="Hosted on Cloudflare"
                  alt="Cloudflare"
                  className="p-3 hover:p-1 transition-all duration-200 hover:saturate-100"
                  style={{width: '400%', height: '100%', position: 'relative'}}
                />
              </a>

              <a
                className="inline-block relative w-16 h-16 mx-2 opacity-60 hover:opacity-100 transition-all duration-200"
                href="https://github.com/replicate/kontext-chat-cloudflare"
              >
                <img
                  src="/logomarks/github.svg"
                  data-tooltip-id="github-tooltip"
                  data-tooltip-content="Fork it on GitHub"
                  className="p-3 hover:p-1 transition-all duration-200 hover:saturate-100"
                  style={{width: '100%', height: '100%', position: 'relative'}}
                />
              </a>
            </nav>
          </div>
        </footer>
      </div>

      {dragActive && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 pointer-events-none">
          <div className="bg-white border-4 border-dashed border-orange-400 rounded-2xl px-12 py-16 text-3xl font-bold text-orange-500 shadow-xl pointer-events-none">
            Drop your image here
          </div>
        </div>
      )}
    </div>
  );
}